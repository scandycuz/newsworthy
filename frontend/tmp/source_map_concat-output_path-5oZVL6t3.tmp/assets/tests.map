{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/adapters/application.jshint.lint-test.js","frontend/tests/adapters/custom-adapter.jshint.lint-test.js","frontend/tests/app.jshint.lint-test.js","frontend/tests/controllers/company.jshint.lint-test.js","frontend/tests/helpers/calculate-change.jshint.lint-test.js","frontend/tests/helpers/destroy-app.js","frontend/tests/helpers/destroy-app.jshint.lint-test.js","frontend/tests/helpers/format-values.jshint.lint-test.js","frontend/tests/helpers/is-positive.jshint.lint-test.js","frontend/tests/helpers/module-for-acceptance.js","frontend/tests/helpers/module-for-acceptance.jshint.lint-test.js","frontend/tests/helpers/resolver.js","frontend/tests/helpers/resolver.jshint.lint-test.js","frontend/tests/helpers/start-app.js","frontend/tests/helpers/start-app.jshint.lint-test.js","frontend/tests/models/company.jshint.lint-test.js","frontend/tests/resolver.jshint.lint-test.js","frontend/tests/router.jshint.lint-test.js","frontend/tests/routes/companies.jshint.lint-test.js","frontend/tests/routes/company.jshint.lint-test.js","frontend/tests/test-helper.js","frontend/tests/test-helper.jshint.lint-test.js","frontend/tests/unit/adapters/application-test.js","frontend/tests/unit/adapters/application-test.jshint.lint-test.js","frontend/tests/unit/controllers/company-test.js","frontend/tests/unit/controllers/company-test.jshint.lint-test.js","frontend/tests/unit/helpers/calculate-change-test.js","frontend/tests/unit/helpers/calculate-change-test.jshint.lint-test.js","frontend/tests/unit/helpers/format-values-test.js","frontend/tests/unit/helpers/format-values-test.jshint.lint-test.js","frontend/tests/unit/helpers/is-positive-test.js","frontend/tests/unit/helpers/is-positive-test.jshint.lint-test.js","frontend/tests/unit/models/company-test.js","frontend/tests/unit/models/company-test.jshint.lint-test.js","frontend/tests/unit/routes/companies-test.js","frontend/tests/unit/routes/companies-test.jshint.lint-test.js","frontend/tests/unit/routes/company-test.js","frontend/tests/unit/routes/company-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/adapters/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('frontend/tests/adapters/custom-adapter.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/custom-adapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/custom-adapter.js should pass jshint.');\n  });\n});","define('frontend/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('frontend/tests/controllers/company.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/company.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/company.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/calculate-change.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/calculate-change.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/calculate-change.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('frontend/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/format-values.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/format-values.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/format-values.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/is-positive.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/is-positive.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-positive.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'frontend/tests/helpers/start-app', 'frontend/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _frontendTestsHelpersStartApp, _frontendTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _frontendTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _frontendTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('frontend/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/resolver', ['exports', 'frontend/resolver', 'frontend/config/environment'], function (exports, _frontendResolver, _frontendConfigEnvironment) {\n\n  var resolver = _frontendResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _frontendConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _frontendConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('frontend/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/start-app', ['exports', 'ember', 'frontend/app', 'frontend/config/environment'], function (exports, _ember, _frontendApp, _frontendConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _frontendConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _frontendApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('frontend/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('frontend/tests/models/company.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/company.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/company.js should pass jshint.');\n  });\n});","define('frontend/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('frontend/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('frontend/tests/routes/companies.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/companies.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/companies.js should pass jshint.');\n  });\n});","define('frontend/tests/routes/company.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/company.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/company.js should pass jshint.');\n  });\n});","define('frontend/tests/test-helper', ['exports', 'frontend/tests/helpers/resolver', 'ember-qunit'], function (exports, _frontendTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_frontendTestsHelpersResolver['default']);\n});","define('frontend/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('frontend/tests/unit/adapters/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/controllers/company-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:company', 'Unit | Controller | company', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('frontend/tests/unit/controllers/company-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/company-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/company-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/calculate-change-test', ['exports', 'frontend/helpers/calculate-change', 'qunit'], function (exports, _frontendHelpersCalculateChange, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | calculate change');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersCalculateChange.calculateChange)([42]);\n    assert.ok(result);\n  });\n});","define('frontend/tests/unit/helpers/calculate-change-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/calculate-change-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/calculate-change-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/format-values-test', ['exports', 'frontend/helpers/format-values', 'qunit'], function (exports, _frontendHelpersFormatValues, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | format values');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersFormatValues.formatValues)([42]);\n    assert.ok(result);\n  });\n});","define('frontend/tests/unit/helpers/format-values-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/format-values-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/format-values-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/is-positive-test', ['exports', 'frontend/helpers/is-positive', 'qunit'], function (exports, _frontendHelpersIsPositive, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | is positive');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersIsPositive.isPositive)([42]);\n    assert.ok(result);\n  });\n});","define('frontend/tests/unit/helpers/is-positive-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/is-positive-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/is-positive-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/models/company-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('company', 'Unit | Model | company', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('frontend/tests/unit/models/company-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/company-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/company-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/routes/companies-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:companies', 'Unit | Route | companies', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/companies-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/companies-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/companies-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/routes/company-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:company', 'Unit | Route | company', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/company-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/company-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/company-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}